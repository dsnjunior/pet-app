---
import { db, schema } from "@/lib/db";
import { and, eq, gte } from "drizzle-orm";

import App from "@/layouts/app.astro";
import { Heading } from "@/components/ui/heading";
import TaskCard from "@/components/task-card/index.astro";
import CreatePetTask from "@/components/create-pet-task";

const { session, t } = Astro.locals;

if (!session) {
  return Astro.redirect(Astro.locals.translatePath("/"));
}

const pet = await db.query.pets.findFirst({
  where: and(
    eq(schema.pets.userId, session.user.userId),
    eq(schema.pets.creating, false),
  ),
  columns: {
    id: true,
  },
});

if (!pet) {
  return Astro.redirect(Astro.locals.translatePath("/pets/new"));
}

const tasks = await db.query.tasks.findMany({
  where: and(
    eq(schema.tasks.userId, session.user.userId),
    gte(schema.tasks.date, new Date().toISOString()),
  ),
  with: {
    pet: true,
  },
  orderBy: (tasks, { asc }) => [asc(tasks.date)],
});
---

<App title="Dashboard">
  <div class="py-8 container max-w-2xl">
    <div class="sm:flex items-center">
      <Heading
        title={t("dashboard.title")}
        description={t("dashboard.description")}
        className="mb-8 sm:mb-0 sm:pr-2 sm:mr-auto"
      />
      <CreatePetTask />
    </div>

    <div class="space-y-4 mt-8">
      {tasks.map((task) => <TaskCard task={task} />)}
    </div>
    {
      !tasks.length && (
        <div class="mt-12 text-center">
          <p class="text-muted-foreground mb-4">{t("dashboard.empty")}</p>
        </div>
      )
    }
  </div>
</App>
