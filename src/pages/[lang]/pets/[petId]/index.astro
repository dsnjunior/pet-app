---
import { and, eq } from "drizzle-orm";
import { Plus } from "lucide-react";

import { db, schema } from "@/lib/db";
import App from "@/layouts/app.astro";
import { Heading } from "@/components/ui/heading";
import PetHistory from "@/components/pet-history";
import { buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const { petId } = Astro.params;
const { session, lang, t } = Astro.locals;

if (!petId) {
  return new Response(null, {
    status: 400,
    headers: {
      "HX-Redirect": Astro.locals.translatePath("/"),
      Redirect: Astro.locals.translatePath("/"),
    },
  });
}

if (!session) {
  return new Response(null, {
    status: 401,
    headers: {
      "HX-Redirect": Astro.locals.translatePath("/"),
      Redirect: Astro.locals.translatePath("/"),
    },
  });
}

const [pet] = await db
  .select()
  .from(schema.pets)
  .where(
    and(eq(schema.pets.userId, session.user.userId), eq(schema.pets.id, petId)),
  );

if (!pet) {
  return new Response(null, {
    status: 404,
    headers: {
      "HX-Redirect": Astro.locals.translatePath("/"),
      Redirect: Astro.locals.translatePath("/"),
    },
  });
}
---

<App title={pet.name}>
  <div class="p-4 container">
    <div class="flex items-center">
      <Heading
        title={pet.name}
        description={t("pet.description", {
          name: pet.name,
          type: t(`pet.type.${pet.type}`),
        })}
      />
    </div>
    <ul class="py-4">
      <li>
        <strong>{t("pet.birth")}:</strong>
        {pet.birthday}
      </li>
      <li>
        <strong>{t("pet.breed")}:</strong>
        {pet.breed}
      </li>
    </ul>

    <a href={`/pets/${pet.id}/tasks/new`} class={cn(buttonVariants(), "mb-4")}>
      <Plus className="w-4 h-4 mr-2" />
      {t("tasks.create")}
    </a>

    <PetHistory petId={petId} />
  </div>
</App>
